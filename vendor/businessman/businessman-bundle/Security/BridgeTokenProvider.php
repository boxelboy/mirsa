<?php
namespace BusinessMan\Bundle\BusinessManBundle\Security;

use BusinessMan\Bundle\BusinessManBundle\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Registry;
use Symfony\Component\Security\Core\Exception\TokenNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * Fetch User entity matching unique token generated by FileMaker
 *
 * @author Jack Murdoch <jack@computech-it.co.uk>
 * @link   http://git.computech-it.co.uk/businessman/BusinessManBundle
 */
class BridgeTokenProvider implements UserProviderInterface
{
    /**
     * @var Registry
     */
    private $doctrine;

    /**
     * @param Registry $doctrine
     */
    public function __construct(Registry $doctrine)
    {
        $this->doctrine = $doctrine;
    }

    /**
     * Loads the user using the given FileMaker token
     *
     * @param string $token
     *
     * @return UserInterface
     *
     * @throws \Symfony\Component\Security\Core\Exception\TokenNotFoundException
     */
    public function loadUserByUsername($token)
    {
        $user = $this->doctrine->getRepository('BusinessManBusinessManBundle:User')->findOneByToken($token);

        if (!$user) {
            throw new TokenNotFoundException();
        }

        return $user;
    }

    /**
     * {@inheritDoc}
     */
    public function refreshUser(UserInterface $user)
    {
        if (!$user instanceof User) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', get_class($user)));
        }

        return $this->loadUserByUsername($user->getToken());
    }

    /**
     * {@inheritDoc}
     */
    public function supportsClass($class)
    {
        return $class === 'BusinessMan\Bundle\BusinessManBundle\Entity\User';
    }
}
